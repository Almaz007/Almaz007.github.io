const i=t=>Symbol.iterator in t,c=t=>"entries"in t,f=(t,e)=>{const o=t instanceof Map?t:new Map(t.entries()),s=e instanceof Map?e:new Map(e.entries());if(o.size!==s.size)return!1;for(const[r,n]of o)if(!Object.is(n,s.get(r)))return!1;return!0},b=(t,e)=>{const o=t[Symbol.iterator](),s=e[Symbol.iterator]();let r=o.next(),n=s.next();for(;!r.done&&!n.done;){if(!Object.is(r.value,n.value))return!1;r=o.next(),n=s.next()}return!!r.done&&!!n.done};function p(t,e){return Object.is(t,e)?!0:typeof t!="object"||t===null||typeof e!="object"||e===null||Object.getPrototypeOf(t)!==Object.getPrototypeOf(e)?!1:i(t)&&i(e)?c(t)&&c(e)?f(t,e):b(t,e):f({entries:()=>Object.entries(t)},{entries:()=>Object.entries(e)})}export{p as s};
