import{c as h}from"./shallow-DyjSOCTL.js";const u=h((f,p)=>({oscillographicOffsets:{},setOscillographicOffsets:()=>{},initOscillographicOffsets:(s,i,t,e)=>{const{oscillographicOffsets:o}=p(),l=o[s];f(r=>({oscillographicOffsets:{...r.oscillographicOffsets,[s]:l?{...l,name:i}:{name:i,send:!1,timePoints:[],values:[],lengthMemory:t,dataType:e}}}))},toggleSend:s=>{f(i=>({...i,oscillographicOffsets:{...i.oscillographicOffsets,[s]:{...i.oscillographicOffsets[s],send:!i.oscillographicOffsets[s].send}}}))},checkOffset:s=>{const{oscillographicOffsets:i}=p(),t=Object.entries(i);if(t.findIndex(e=>e[0]===String(s))!==-1){const e=Object.fromEntries(t.filter(([o])=>o[0]!==String(s)));f({oscillographicOffsets:{...e}})}},updateOscillographicData:s=>{f(i=>{const t={...i.oscillographicOffsets};return Object.entries(s).forEach(([e,o])=>{const l=Number(e),r=t[l];if(r){let a=[...o.timePoints],n=[...o.values];const O=a.map((c,g)=>({time:c,value:n[g]}));O.sort((c,g)=>c.time-g.time),a=O.map(c=>c.time),n=O.map(c=>c.value),t[l]={...r,timePoints:a,values:n}}}),{oscillographicOffsets:t}})}}));export{u};
