import{c as h}from"./shallow-CqVE0ls7.js";const u=h((l,a)=>({oscillographicOffsets:{},setOscillographicOffsets:()=>{},initOscillographicOffsets:(s,i,e,t,o)=>{const{oscillographicOffsets:n}=a(),f=n[s];l(r=>({oscillographicOffsets:{...r.oscillographicOffsets,[s]:f?{...f,name:i}:{name:i,send:!1,timePoints:[],values:[],lengthMemory:e,dataType:t,typeView:o}}}))},toggleSend:s=>{l(i=>({...i,oscillographicOffsets:{...i.oscillographicOffsets,[s]:{...i.oscillographicOffsets[s],send:!i.oscillographicOffsets[s].send}}}))},changeViewTypeForOffset:s=>{const{oscillographicOffsets:i}=a(),e={...i,[s]:{...i[s],typeView:i[s].typeView==="block"?"point":i[s].typeView==="point"?"block":i[s].typeView}};l({oscillographicOffsets:{...e}})},checkOffset:s=>{const{oscillographicOffsets:i}=a(),e=Object.entries(i);if(e.findIndex(t=>t[0]===String(s))!==-1){const t=Object.fromEntries(e.filter(([o])=>o[0]!==String(s)));l({oscillographicOffsets:{...t}})}},updateOscillographicData:s=>{l(i=>{const e={...i.oscillographicOffsets};return Object.entries(s).forEach(([t,o])=>{const n=Number(t),f=e[n];if(f){let r=[...o.timePoints],p=[...o.values];const O=r.map((c,g)=>({time:c,value:p[g]}));O.sort((c,g)=>c.time-g.time),r=O.map(c=>c.time),p=O.map(c=>c.value),e[n]={...f,timePoints:r,values:p}}}),{oscillographicOffsets:e}})}}));export{u};
