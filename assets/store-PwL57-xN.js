import{c as u}from"./shallow-8MTDicKX.js";const b=u((o,a)=>({oscillographicOffsets:{},oscillographicOffsetsFull:{},counter:0,setOscillographicOffsets:()=>{},initOscillographicOffsets:(e,s,t,i,c)=>{o(r=>({oscillographicOffsets:{...r.oscillographicOffsets,[e]:{name:s,send:!0,timePoints:[],values:[],lengthMemory:t,dataType:i,typeView:c}}}))},clearOscillographicOffsets:()=>{o({oscillographicOffsets:{}})},toggleSend:e=>{o(s=>({...s,oscillographicOffsets:{...s.oscillographicOffsets,[e]:{...s.oscillographicOffsets[e],send:!s.oscillographicOffsets[e].send}}}))},changeViewTypeForOffset:e=>{const{oscillographicOffsets:s}=a(),t={...s,[e]:{...s[e],typeView:s[e].typeView==="block"?"point":s[e].typeView==="point"?"block":s[e].typeView}};o({oscillographicOffsets:{...t}})},checkOffset:e=>{const{oscillographicOffsets:s}=a(),t=Object.entries(s);if(t.findIndex(i=>i[0]===String(e))!==-1){const i=Object.fromEntries(t.filter(([c])=>c[0]!==String(e)));o({oscillographicOffsets:{...i}})}},updateOscillographicData:e=>{let{counter:s}=a();o(t=>{const i={...t.oscillographicOffsets};if(Object.entries(e).forEach(([c,r])=>{const f=Number(c),n=i[f];if(n){let O=[...n.timePoints,...r.timePoints],p=[...n.values,...r.values];const g=O.map((l,h)=>({time:l,value:p[h]}));g.sort((l,h)=>l.time-h.time),O=g.map(l=>l.time),p=g.map(l=>l.value),i[f]={...n,timePoints:O,values:p}}}),s++,s===12){const c=Object.fromEntries(Object.entries(i).map(([r,f])=>[r,{...f,timePoints:[],values:[]}]));return{counter:0,oscillographicOffsetsFull:structuredClone(i),oscillographicOffsets:{...c}}}return{counter:++s,oscillographicOffsets:{...i}}})}}));export{b as u};
