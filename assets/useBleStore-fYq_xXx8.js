import{c as l}from"./shallow-fA2qKq8g.js";import{v as C}from"./v4-C6aID195.js";const E=l((r,a)=>({offsetsByTypes:{bool:[],int:[],float:[],analog:[]},offsetsOsc:[],setOscOffsets(t){r({offsetsOsc:t})},setOffsets(t,c){r({offsetsByTypes:{...a().offsetsByTypes,[c]:[...t]}})}})),S=l((r,a)=>({device:null,characteristics:{},logs:[],uuids:{serviceUuid1:"00000115-0000-1000-8000-00805f9b34fb",sendCharacteristicUuid:"00000116-0000-1000-8000-00805f9b34fb",chartCharacteristicUiid:"00000117-0000-1000-8000-00805f9b34fb",pwa_config_service_UUID:"00000101-0000-1000-8000-00805f9b34fb",pwa_config_service_rx_chararcteristic_UUID:"00000102-0000-1000-8000-00805f9b34fb",pwa_config_service_tx_chararcteristic_UUID:"00000103-0000-1000-8000-00805f9b34fb",oscill_service_UUID:"00000118-0000-1000-8000-00805f9b34fb",oscill_service_rx_chararcteristic_UUID:"00000119-0000-1000-8000-00805f9b34fb",oscill_service_tx_chararcteristic_UUID:"00000120-0000-1000-8000-00805f9b34fb"},modemParameters:{timestamp:0,timestampSubSeconds:0,latitude:0,longitude:0,altitude:0,is_valid:0,fix:0,gp_sats_in_use:0,gl_sats_in_use:0,bd_sats_in_use:0,gp_sats_in_view:0,gl_sats_in_view:0,bd_sats_in_view:0,ppsFlag:0},clearLogs(){r({logs:[]})},connect:async()=>{const{addLog:t,requestBluetoothDevice:c,connectDeviceAndCacheCharacteristic:s,startNotifications:i}=a();try{await c(),await s(),await i()}catch(e){t(`Error: ${e==null?void 0:e.message}`,"err")}},boundHandleDisconnection:()=>{const{device:t,addLog:c}=a();c(`"${t.name}"  bluetooth device disconnected`)},addLog:(t,c="")=>{const{logs:s}=a(),i={id:C(),message:t,type:c};r({logs:[...s,i]})},requestBluetoothDevice:async()=>{const{addLog:t,boundHandleDisconnection:c,uuids:s}=a();t("Requesting bluetooth device...");const i=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[s.oscill_service_UUID,s.pwa_config_service_UUID,s.serviceUuid1]});t(`${i.name} bluetooth device selected`),i.addEventListener("gattserverdisconnected",c),r({device:i})},connectDeviceAndCacheCharacteristic:async()=>{const{uuids:t,addLog:c,device:s}=a();c("Connecting to GATT server...");const i=await s.gatt.connect();c("GATT server connected, getting services...");const e=await i.getPrimaryService(t.serviceUuid1),o=await i.getPrimaryService(t.pwa_config_service_UUID),n=await i.getPrimaryService(t.oscill_service_UUID);c("Services founded, getting characteristics...");const g=await o.getCharacteristic(t.pwa_config_service_rx_chararcteristic_UUID),_=await o.getCharacteristic(t.pwa_config_service_tx_chararcteristic_UUID),f=await e.getCharacteristic(t.chartCharacteristicUiid),d=await n.getCharacteristic(t.oscill_service_tx_chararcteristic_UUID);c("Characteristics found"),r({characteristics:{pwa_config_service_rx_chararcteristic:g,pwa_config_service_tx_chararcteristic:_,oscill_service_tx_chararcteristic:d,chartCharacteristic:f}})},handleModemParametrsChanged:t=>{const{addLog:c}=a(),s=new Uint8Array(t.target.value.buffer),i=new DataView(s.buffer,s.byteOffset,s.byteLength);let e=0;const o=i.getUint32(e,!0);e+=4;let n=i.getUint32(e,!0);n=n/169356432,e+=4;const _=i.getInt32(e,!0)/65536;e+=4;const d=i.getInt32(e,!0)/65536;e+=4;const u=i.getInt32(e,!0)/65536;e+=4;const v=i.getUint8(e);e+=1;const w=i.getUint8(e);e+=1;const h=i.getUint8(e);e+=1;const U=i.getUint8(e);e+=1;const b=i.getUint8(e);e+=1;const p=i.getUint8(e);e+=1;const m=i.getUint8(e);e+=1;const y=i.getUint8(e);e+=1;const D=i.getUint8(e);e+=1,r({modemParameters:{timestamp:o,timestampSubSeconds:n,latitude:_,longitude:d,altitude:u,is_valid:v,fix:w,gp_sats_in_use:h,gl_sats_in_use:U,bd_sats_in_use:b,gp_sats_in_view:p,gl_sats_in_view:m,bd_sats_in_view:y,ppsFlag:D}}),c("modem parametrs received","in")},handleTerminalChanged:t=>{const{addLog:c}=a(),s=new TextDecoder().decode(t.target.value);c(s,"in")},startNotifications:async()=>{const{addLog:t,characteristics:{pwa_config_service_tx_chararcteristic:c}}=a();t("Starting notifications..."),await c.startNotifications(),t("Notifications started")},send:async t=>{const{characteristics:{sendCharacteristic:c},device:s,addLog:i}=a();try{if(t=String(t||""),!t)throw new Error("нельзя отправить пустые данные");if(!s||!c)throw new Error("необходимо подключиться к устройству");await c.writeValue(new TextEncoder().encode(t)),i(t,"out")}catch(e){i(`Error: ${e.message}`,"err")}},sendConfig:async t=>{const{characteristics:{pwa_config_service_rx_chararcteristic:c},device:s,addLog:i}=a();try{if(!t)throw new Error("нельзя отправить пустые данные");if(!s||!c)throw new Error("необходимо подключиться к устройству");await c.writeValue(new TextEncoder().encode(t)),i("конфигурация была отпралена","out")}catch(e){i(`Error: ${e.message}`,"err")}}}));export{S as a,E as u};
